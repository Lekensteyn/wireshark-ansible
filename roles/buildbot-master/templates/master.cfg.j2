# -*- python -*-
# ex: set filetype=python:

import os
from buildbot.plugins import *

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# Common global variables

# Set gerrit_server to an empty string to disable Gerrit integration.
gerrit_server = '{{ gerrit_sshhost }}'
gerrit_user = 'wireshark-buildbot'
git_url = "{{ git_url }}"

# Directory for secrets provider and worker passwords (worker_password_X).
secrets_directory = os.path.join(basedir, "secrets.d")
def get_ubuntu_hosts():
    """Yields username, password"""
    # TODO maybe be explicit with list of hostnames?
    prefix = "worker_password_"
    for filename in os.listdir(secrets_directory):
        if not filename.startswith(prefix):
            continue
        path = os.path.join(secrets_directory, filename)
        username = filename[len(prefix):]
        with open(path, "r") as f:
            yield username, f.read().strip()

# Set to True / False to enable or disable builders
enable_windows_petri_dish = True
enable_windows_petri_dish = False  # TODO temporarily disable for debug
enable_ubuntu_petri_dish = True
gitBuilderNames = []

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = []

if enable_windows_petri_dish:
    c['slaves'].append(worker.Worker(
        'windows-x86-petri-dish',
        'XXXX'  # TODO store secret elsewhere
    ))
    gitBuilderNames.append('Windows x86 Petri Dish')

if enable_ubuntu_petri_dish:
    ubuntu_workers = []
    for username, password in get_ubuntu_hosts():
        ubuntu_worker = worker.Worker(
            #"ubuntu-x86-64-petri-dish-%d" % i,
            username, password,
            max_builds=1,   # Prevent parallel builds
        )
        c['workers'].append(ubuntu_worker)
        ubuntu_workers.append(ubuntu_worker.name)

    gitBuilderNames += ['Ubuntu x86-64 Petri Dish%s' % what
            for what in ('', ' (GCC)', ' (Clang)')]


# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

if gerrit_server:
    # Watch directly for changes using Gerrit features
    c['change_source'] = changes.GerritChangeSource(gerrit_server, gerrit_user,
            handled_events=["patchset-created", "comment-added"])

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

#Check there is Petri-Dish=+1 in Approvals (of comment-added)

def change_petri_dish_plus_1(change):
    if "event.approvals" in change.properties:
        for a in change.properties["event.approvals"]:
            if "Petri-Dish" in a["type"] and int(a["value"]) == 1:
               return True
    return False

c['schedulers'] = []
if gerrit_server:
    c['schedulers'].append(schedulers.SingleBranchScheduler(
                                name="Gerrit",
                                change_filter=util.ChangeFilter(branch_re="master/*", filter_fn=change_petri_dish_plus_1),
                                treeStableTimer=None,
                                builderNames=gitBuilderNames))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=gitBuilderNames))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

# TODO Gerrit docs recommend use of git-daemon and git:// URLs for speed-up.
git_clone = (steps.Gerrit if gerrit_server else steps.Git)(
    repourl=git_url,
    branch='master',
    #shallow=True,      # Note: breaks `git describe` due to missing tags.
    progress=True,
    #clobberOnFailure=True, # Defaults to False (i.e. not remove whole checkout on failure)
    mode='full',        # Clean build tree
    method='fresh',     # Clean all untracked and ignored files
    getDescription=True,
    retryFetch=True,
    retry=(300, 5),     # TODO change this to something shorter?
    timeout=30 * 60,
)

autogen = steps.ShellCommand(
    haltOnFailure=True,
    description=['autogen.sh'],
    command=['./autogen.sh']
)

configure_gcc = steps.Configure(
    name='configure with extra compiler warnings',
    descriptionDone=['configured with extra compiler warnings (GCC)'],
    command=[
        './configure',
        '--with-gtk',
        '--enable-extra-compiler-warnings',
    ],
    env={
        "CC": "ccache gcc",
        "CXX": "ccache g++",
    }
)

configure_clang = steps.Configure(
    command=[
        './configure',
        '--with-gtk',
        '--enable-extra-compiler-warnings',
        '--enable-checkhf-conflict',
    ],
    name='configure with extra compiler warnings',
    descriptionDone=['configured with extra compiler warnings (clang)'],
    env={
        "CC": "ccache clang",
        "CXX": "ccache clang++",
        "CCACHE_CPP2": "yes",
        #"CC": "clang",
        #"CXX": "clang++",
        "CFLAGS": "-Qunused-arguments",
        "CXXFLAGS": "-Qunused-arguments",
    }
)

ubuntu_make_all = steps.Compile(
    description=['compiling'],
    descriptionDone=['compiled'],
    command=["make", "all"],
    # TODO configure -j4 based on something else?
    env={'MAKEFLAGS': '-j 4 -l 5'}
)

ubuntu_make_all_clang_ccache = steps.Compile(
    description=['compiling'],
    descriptionDone=['compiled'],
    command=["make", "all"],
    # TODO configure -j4 based on something else?
    env={
        'MAKEFLAGS': '-j 4 -l 5',
        'CCACHE_CPP2': 'yes'
    }
)

ubuntu_dpkg_buildpackage = steps.Compile(
    description=['Create Debian package'],
    descriptionDone=['Debian package'],
    # NOTE: removed MAKEFLAGS, added -jauto here to scale according to CPU count
    # (which is present since at lesat 16.04LTS)
    # TODO with latent workers, ccache is empty and possibly slows down.
    # TODO maybe add --compression=gzip to make compression step faster than xz?
    command=["dpkg-buildpackage", "-us", "-uc", "-rfakeroot", "-jauto"],
    env={
        'CC': 'ccache gcc',
        'CXX': 'ccache g++',
    }
)

ubuntu_lintian = steps.ShellCommand(
    description=['Lintian check'],
    descriptionDone=['Lintian checked'],
    name='Lintian',
    warnOnFailure=True,
    #command=["lintian", "-E", "-I", "--pedantic", "../*.changes"],
    #command=["lintian", "-E", "-I", "--pedantic"],
    command=["lintian", "--display-experimental", "--display-info", "--pedantic", "--profile", "debian"],
    #env={'DISPLAY': ':1'}
)

ubuntu_tests = steps.ShellCommand(
    name='test.sh',
    warnOnFailure=True,
    description=['run tests'],
    #timeout=60 * 60,
    command=['bash', 'test/test.sh', '-c', '-s', 'all'],
    # TODO this is not really headless right?
    env={'DISPLAY': ':1'}
)

ubuntu_conflict = steps.ShellCommand(
    name='conflict check',
    warnOnFailure=True,
    description=['run conflict check'],
    descriptionDone=['conflict checked'],
    #timeout=60 * 60,
    command=['bash', './tshark', '-v'],
)

ubuntu_licenses = steps.ShellCommand(
   name='check licenses',
   #haltOnFailure=True,   # NOTE changed this to continue on failure
   description=['check licenses'],
   descriptionDone=['checked licenses'],
   command=['tools/checklicenses.py'],
)

git_clean = steps.ShellCommand(
    haltOnFailure=True,
    description=['cleaning git'],
    descriptionDone=['cleaned git'],
    command=['git', 'clean', '-d', '-f', '-x']
)

make_version = steps.ShellCommand(
    name='make-version.pl',
    haltOnFailure=True,
    description=['setting release information'],
    descriptionDone=['set release information'],
    command=['perl', 'make-version.pl', '--set-release']
)

ubuntu_precommit = steps.ShellCommand(
   name='Pre-commit check',
   #haltOnFailure=True,
   description=['Pre-commit checking'],
   descriptionDone=['Pre-commit checked'],
   command=['bash', 'tools/pre-commit', 'HEAD^1'],
)

ccache_statistics = steps.ShellCommand(
    name='ccache statistics',
    haltOnFailure=False,
    command=['ccache', '--show-stats']
)


f_deb = util.BuildFactory([
    git_clone,
    # NOTE moved pre-commit before dpkg-buildpackage
    ubuntu_precommit,
    # NOTE moved licensecheck before building to avoid failing on files in debian/
    ubuntu_licenses,
    ubuntu_dpkg_buildpackage,
    ubuntu_lintian,
    ccache_statistics,
])

f_make_gcc = util.BuildFactory([
    git_clone,
    make_version,
    autogen,
    configure_gcc,
    # TODO should the next "distclean" step be included to check whether too many files are removed?
    #steps.Compile(command=["make", "distclean"]),
    #configure_gcc,
    ubuntu_make_all,
    #ubuntu_tests,
    ccache_statistics,
])

f_make_clang = util.BuildFactory([
    git_clone,
    # TODO change this to use cmake?
    make_version,
    autogen,
    configure_clang,
    ubuntu_make_all_clang_ccache,
    ubuntu_conflict,
    ccache_statistics,
])

c['builders'] = []

if enable_ubuntu_petri_dish:
    c['builders'].append(
        util.BuilderConfig(name="Ubuntu x86-64 Petri Dish",
          workernames=ubuntu_workers,
          builddir='ubuntu-x86-64-petri-dish',
          factory=f_deb))

    c['builders'].append(
        util.BuilderConfig(name="Ubuntu x86-64 Petri Dish (GCC)",
          workernames=ubuntu_workers,
          builddir='ubuntu-x86-64-petri-dish-gcc',
          factory=f_make_gcc))

    c['builders'].append(
        util.BuilderConfig(name="Ubuntu x86-64 Petri Dish (Clang)",
          workernames=ubuntu_workers,
          builddir='ubuntu-x86-64-petri-dish-clang',
          factory=f_make_clang))

# Collapse builders in single build (defaults to False).
#c['collapseRequests'] = False

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

def gerritSummaryCB(buildInfoList, results, status, arg):
    success = False
    failure = False

    msgs = []

    for buildInfo in buildInfoList:
        msg = "Builder %(name)s %(resultText)s (%(text)s)" % buildInfo
        link = buildInfo.get('url', None)
        if link:
            msg += " - " + link
        else:
            msg += "."

        msgs.append(msg)

        if buildInfo['result'] == util.SUCCESS:
            success = True
        else:
            failure = True

    if success and not failure:
        verified = 1
    else:
        verified = -1

    return dict(message='\n\n'.join(msgs),
                labels={
                    'Verified': verified,
                    # Reset Build Petri-Dish label
                    'Petri-Dish': 0,
                })

c['services'].append(reporters.GerritStatusPush(gerrit_server, gerrit_user,
                                                summaryCB=gerritSummaryCB))


####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL'). The buildbotURL string should point to
# the location where the buildbot's internal web server is visible.

c['title'] = "Wireshark Petri Dish"
c['titleURL'] = "https://www.wireshark.org/"
c['buildbotURL'] = "https://buildbot.wireshark.org/petri-dish/"
c['buildbotURL'] = "http://10.42.0.130:8010/"   # TODO fixme

# minimalistic config to activate new web UI
# TODO auth?
c['www'] = dict(port=8010,
                plugins=dict(waterfall_view={}, console_view={}))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.
    'db_url' : "sqlite:///state.sqlite",
}

####### MISCELLANEOUS

# 0.9.6 is missing util.SecretInAFile, try the other location.
# https://github.com/buildbot/buildbot/issues/3130
try:
    from util import SecretInAFile
except:
    from buildbot.secrets.providers.file import SecretInAFile

# Secrets are stored in this subdirectory.
c['secretsProviders'] = [SecretInAFile(dirname=secrets_directory)]

# Disable usage reporting
c['buildbotNetUsageData'] = None
